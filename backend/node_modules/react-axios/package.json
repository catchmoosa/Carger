{
  "_from": "react-axios",
  "_id": "react-axios@2.0.3",
  "_inBundle": false,
  "_integrity": "sha512-63kY2iupdRgbvPq9G8xmM0NWUnt2Q5YmpotMoLQsxKOzKXKZg2Lo6CzF/bcZvtmv3WnfjBU6Bg8nZQO28eIAZw==",
  "_location": "/react-axios",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-axios",
    "fetchSpec": "latest",
    "name": "react-axios",
    "raw": "react-axios",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-axios/-/react-axios-2.0.3.tgz",
  "_shasum": "9aeb75a2db07cebaf0ff710f666a2932ce024af5",
  "_shrinkwrap": null,
  "_spec": "react-axios",
  "_where": "C:\\Users\\bhara_av68h9z\\Desktop\\car\\carger\\backend",
  "author": {
    "name": "Shea Ivey"
  },
  "bugs": {
    "url": "https://github.com/sheaivey/react-axios/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Axios Component for React with child function callback.",
  "devDependencies": {
    "axios": "^0.17.1",
    "babel-cli": "^6.18.0",
    "babel-core": "^6.18.2",
    "babel-eslint": "^7.1.1",
    "babel-loader": "^6.2.8",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-es2015": "^6.18.0",
    "babel-preset-react": "^6.16.0",
    "babel-preset-stage-2": "^6.24.1",
    "cross-env": "^3.1.3",
    "eslint": "^3.2.0",
    "eslint-config-rackt": "^1.1.1",
    "eslint-plugin-react": "^6.7.1",
    "express": "^4.14.0",
    "express-urlrewrite": "^1.2.0",
    "jest": "^23.6.0",
    "raf": "^3.4.0",
    "react": "^16.1.1",
    "react-dom": "^16.1.1",
    "react-test-renderer": "^16.1.1",
    "webpack": "^1.13.3",
    "webpack-dev-middleware": "^1.8.4"
  },
  "files": [
    "*.md",
    "es",
    "lib",
    "umd"
  ],
  "homepage": "https://github.com/sheaivey/react-axios",
  "jsnext:main": "es/index.js",
  "keywords": [
    "ajax",
    "axios",
    "component",
    "http",
    "node",
    "promise",
    "react",
    "xhr"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "react-axios",
  "optionalDependencies": {},
  "peerDependencies": {
    "axios": "^0.15.0",
    "prop-types": "^15.5.0",
    "react": "^0.14.0 || ^15.0.0 || ^16.0.0"
  },
  "readme": "\n[![npm](https://img.shields.io/npm/v/react-axios.svg)](https://www.npmjs.com/package/react-axios)\n[![Build Status](https://travis-ci.org/sheaivey/react-axios.svg?branch=master)](https://travis-ci.org/sheaivey/react-axios)\n[![npm](https://img.shields.io/npm/l/react-axios.svg)](https://github.com/sheaivey/react-axios/blob/master/LICENSE)\n[![npm](https://img.shields.io/npm/dt/react-axios.svg)](https://www.npmjs.com/package/react-axios)\n# react-axios\nAxios Component for React with child function callback.\nThis is intended to allow in render async requests.\n\n## Features\n\n- Same great features found in [Axios](https://github.com/mzabriskie/axios)\n- Component driven\n- Child function callback ***(error, response, isLoading, makeRequest, axios) => { }***\n- Auto cancel previous requests\n- Debounce to prevent rapid calls.\n- Request only invoked on prop change and *isReady* state.\n- Callback props for ***onSuccess***, ***onError***, and ***onLoading***\n- Supports custom axios instances through ***props*** or a ***&lt;AxiosProvider ... &gt;***\n- Create your own request components wrapped using the ***withAxios({options})(ComponentToBeWrapped)*** HoC\n\n## Installing\n\nUsing npm:\n\n```bash\n$ npm install react-axios\n```\n\nAlso install the required peer dependancies if you have not already done so:\n\n```bash\n$ npm install axios\n$ npm install react\n$ npm install prop-types\n```\n\n## Components & Properties\n\n#### Base Request Component\n```jsx\n<Request\n  instance={axios.create({})} /* custom instance of axios - optional */\n  method=\"\" /* get, delete, head, post, put and patch - required */\n  url=\"\" /*  url endpoint to be requested - required */\n  data={} /* post data - optional */\n  params={} /* queryString data - optional */\n  config={} /* axios config - optional */\n  debounce={200} /* minimum time between requests events - optional */\n  debounceImmediate={true} /* make the request on the beginning or trailing end of debounce - optional */\n  isReady={true} /* can make the axios request - optional */\n  onSuccess={(response)=>{}} /* called on success of axios request - optional */\n  onLoading={()=>{}} /* called on start of axios request - optional */\n  onError=(error)=>{} /* called on error of axios request - optional */\n/>\n```\n\n#### Helper Components\n```jsx\n<Get ... />\n<Delete ... />\n<Head ... />\n<Post ... />\n<Put ... />\n<Patch ... />\n```\n\n## Example\n\nInclude in your file\n\n```js\nimport { AxiosProvider, Request, Get, Delete, Head, Post, Put, Patch, withAxios } from 'react-axios'\n```\n\nPerforming a `GET` request\n\n```js\n// Post a request for a user with a given ID\nrender() {\n  return (\n    <div>\n      <Get url=\"/api/user\" params={{id: \"12345\"}}>\n        {(error, response, isLoading, makeRequest, axios) => {\n          if(error) {\n            return (<div>Something bad happened: {error.message} <button onClick={() => makeRequest({ params: { reload: true } })}>Retry</button></div>)\n          }\n          else if(isLoading) {\n            return (<div>Loading...</div>)\n          }\n          else if(response !== null) {\n            return (<div>{response.data.message} <button onClick={() => makeRequest({ params: { refresh: true } })}>Refresh</button></div>)\n          }\n          return (<div>Default message before request is made.</div>)\n        }}\n      </Get>\n    </div>\n  )\n}\n```\n\n### Exposed properties on the child function.\n`error` The error object returned by Axios.\n\n`response` The response object returned by Axios.\n\n`isLoading` Boolean flag indicating if Axios is currently making a XHR request.\n\n`makeRequest(props)` Function to invoke another XHR request. This function accepts new temporary props that will be overloaded with the existing props for this request only.\n\n`axios` current instance of axios being used.\n\n\n## Custom Axios Instance\n\nCreate an axios instance\n```js\nconst axiosInstance = axios.create({\n  baseURL: '/api/',\n  timeout: 2000,\n  headers: { 'X-Custom-Header': 'foobar' }\n});\n\n```\n\nPass down through a provider\n```jsx\n<AxiosProvider instance={axiosInstance}>\n  <Get url=\"test\">\n    {(error, response, isLoading, makeRequest, axios) => {\n      ...\n    }}\n  </Get>\n</AxiosProvider>\n```\n\nOr pass down through props\n```jsx\n<Get url=\"test\" instance={axiosInstance}>\n  {(error, response, isLoading, makeRequest, axios) => {\n    ...\n  }}\n</Get>\n```\n\nRetrieve from custom provider (when you need to directly use axios).\nThe default instance will be passed if not inside an `<AxiosProvider/>`.\n```jsx\n<AxiosProvider instance={axiosInstance}>\n  <MyComponent/>\n</AxiosProvider>\n```\n\n## withAxios(Component) HoC\nIf you need basic access to the axios instance but don't need anything else you can wrap a component using withAxios() higher order component.\n```jsx\nconst MyComponent = withAxios(class MyComponentRaw extends React.Component {\n  componentWillMount() {\n    this.props.axios('test').then(result => {\n      this.setState({ data: result.data })\n    })\n  }\n  render() {\n    const data = (this.state || {}).data\n    return <div>{JSON.stringify(data)}</div>\n  }\n})\n```\n\n## withAxios(options)(Component) HoC\nIf you want to create your own component with the full react-axios request `options`. You can override the initial options supplied to withAxios at any time by passing `options` prop to your wrapped component. See below on how this works.\n\n```jsx\nconst MyComponent = withAxios({\n    url: '/api/user'\n    params: {id: \"12345\"}\n  })(class MyComponentRaw extends React.Component {\n  render() {\n    const {error, response, isLoading, makeRequest, axios} = this.props\n    if(error) {\n      return (<div>Something bad happened: {error.message}</div>)\n    } else if(isLoading) {\n      return (<div className=\"loader\"></div>)\n    } else if(response !== null) {\n      return (<div>{response.data.message}</div>)\n    }\n    return null\n  }\n})\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sheaivey/react-axios.git"
  },
  "scripts": {
    "build": "npm run build-cjs && npm run build-es && npm run build-umd && npm run build-min",
    "build-cjs": "rimraf lib && cross-env BABEL_ENV=cjs babel src -d lib --ignore __tests__",
    "build-es": "rimraf es && cross-env BABEL_ENV=es babel src -d es --ignore __tests__",
    "build-min": "cross-env NODE_ENV=production webpack -p src/index.js umd/ReactAxios.min.js",
    "build-umd": "cross-env NODE_ENV=development webpack src/index.js umd/ReactAxios.js",
    "lint": "eslint src",
    "start": "node examples/index.js",
    "test": "npm run lint && jest"
  },
  "version": "2.0.3"
}
